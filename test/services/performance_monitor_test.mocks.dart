// Mocks generated by Mockito 5.4.5 from annotations
// in dunbeholden/test/services/performance_monitor_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:firebase_core/firebase_core.dart' as _i2;
import 'package:firebase_performance/firebase_performance.dart' as _i3;
import 'package:firebase_performance_platform_interface/firebase_performance_platform_interface.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFirebaseApp_0 extends _i1.SmartFake implements _i2.FirebaseApp {
  _FakeFirebaseApp_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTrace_1 extends _i1.SmartFake implements _i3.Trace {
  _FakeTrace_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeHttpMetric_2 extends _i1.SmartFake implements _i3.HttpMetric {
  _FakeHttpMetric_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [FirebasePerformance].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebasePerformance extends _i1.Mock
    implements _i3.FirebasePerformance {
  MockFirebasePerformance() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FirebaseApp get app =>
      (super.noSuchMethod(
            Invocation.getter(#app),
            returnValue: _FakeFirebaseApp_0(this, Invocation.getter(#app)),
          )
          as _i2.FirebaseApp);

  @override
  set app(_i2.FirebaseApp? _app) => super.noSuchMethod(
    Invocation.setter(#app, _app),
    returnValueForMissingStub: null,
  );

  @override
  Map<dynamic, dynamic> get pluginConstants =>
      (super.noSuchMethod(
            Invocation.getter(#pluginConstants),
            returnValue: <dynamic, dynamic>{},
          )
          as Map<dynamic, dynamic>);

  @override
  _i4.Future<bool> isPerformanceCollectionEnabled() =>
      (super.noSuchMethod(
            Invocation.method(#isPerformanceCollectionEnabled, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<void> setPerformanceCollectionEnabled(bool? enabled) =>
      (super.noSuchMethod(
            Invocation.method(#setPerformanceCollectionEnabled, [enabled]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i3.Trace newTrace(String? name) =>
      (super.noSuchMethod(
            Invocation.method(#newTrace, [name]),
            returnValue: _FakeTrace_1(
              this,
              Invocation.method(#newTrace, [name]),
            ),
          )
          as _i3.Trace);

  @override
  _i3.HttpMetric newHttpMetric(String? url, _i5.HttpMethod? httpMethod) =>
      (super.noSuchMethod(
            Invocation.method(#newHttpMetric, [url, httpMethod]),
            returnValue: _FakeHttpMetric_2(
              this,
              Invocation.method(#newHttpMetric, [url, httpMethod]),
            ),
          )
          as _i3.HttpMetric);
}

/// A class which mocks [Trace].
///
/// See the documentation for Mockito's code generation for more information.
class MockTrace extends _i1.Mock implements _i3.Trace {
  MockTrace() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> start() =>
      (super.noSuchMethod(
            Invocation.method(#start, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> stop() =>
      (super.noSuchMethod(
            Invocation.method(#stop, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void incrementMetric(String? name, int? value) => super.noSuchMethod(
    Invocation.method(#incrementMetric, [name, value]),
    returnValueForMissingStub: null,
  );

  @override
  void setMetric(String? name, int? value) => super.noSuchMethod(
    Invocation.method(#setMetric, [name, value]),
    returnValueForMissingStub: null,
  );

  @override
  int getMetric(String? name) =>
      (super.noSuchMethod(Invocation.method(#getMetric, [name]), returnValue: 0)
          as int);

  @override
  void putAttribute(String? name, String? value) => super.noSuchMethod(
    Invocation.method(#putAttribute, [name, value]),
    returnValueForMissingStub: null,
  );

  @override
  void removeAttribute(String? name) => super.noSuchMethod(
    Invocation.method(#removeAttribute, [name]),
    returnValueForMissingStub: null,
  );

  @override
  String? getAttribute(String? name) =>
      (super.noSuchMethod(Invocation.method(#getAttribute, [name])) as String?);

  @override
  Map<String, String> getAttributes() =>
      (super.noSuchMethod(
            Invocation.method(#getAttributes, []),
            returnValue: <String, String>{},
          )
          as Map<String, String>);
}

/// A class which mocks [HttpMetric].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpMetric extends _i1.Mock implements _i3.HttpMetric {
  MockHttpMetric() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set httpResponseCode(int? httpResponseCode) => super.noSuchMethod(
    Invocation.setter(#httpResponseCode, httpResponseCode),
    returnValueForMissingStub: null,
  );

  @override
  set requestPayloadSize(int? requestPayloadSize) => super.noSuchMethod(
    Invocation.setter(#requestPayloadSize, requestPayloadSize),
    returnValueForMissingStub: null,
  );

  @override
  set responseContentType(String? responseContentType) => super.noSuchMethod(
    Invocation.setter(#responseContentType, responseContentType),
    returnValueForMissingStub: null,
  );

  @override
  set responsePayloadSize(int? responsePayloadSize) => super.noSuchMethod(
    Invocation.setter(#responsePayloadSize, responsePayloadSize),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<void> start() =>
      (super.noSuchMethod(
            Invocation.method(#start, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> stop() =>
      (super.noSuchMethod(
            Invocation.method(#stop, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void putAttribute(String? name, String? value) => super.noSuchMethod(
    Invocation.method(#putAttribute, [name, value]),
    returnValueForMissingStub: null,
  );

  @override
  void removeAttribute(String? name) => super.noSuchMethod(
    Invocation.method(#removeAttribute, [name]),
    returnValueForMissingStub: null,
  );

  @override
  String? getAttribute(String? name) =>
      (super.noSuchMethod(Invocation.method(#getAttribute, [name])) as String?);

  @override
  Map<String, String> getAttributes() =>
      (super.noSuchMethod(
            Invocation.method(#getAttributes, []),
            returnValue: <String, String>{},
          )
          as Map<String, String>);
}
